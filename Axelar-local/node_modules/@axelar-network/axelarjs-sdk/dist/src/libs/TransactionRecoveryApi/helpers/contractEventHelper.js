"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findContractEvent = exports.getGasAmountFromTxReceipt = exports.getNativeGasAmountFromTxReceipt = exports.getLogIndexFromTxReceipt = exports.getDestinationChainFromTxReceipt = void 0;
const abi_1 = require("@ethersproject/abi");
const ethers_1 = require("ethers");
const axelarGatewayAbi_json_1 = __importDefault(require("../../abi/axelarGatewayAbi.json"));
const IAxelarGasService_json_1 = __importDefault(require("../../abi/IAxelarGasService.json"));
function getDestinationChainFromTxReceipt(receipt) {
    const signatureContractCallWithToken = ethers_1.ethers.utils.id("ContractCallWithToken(address,string,string,bytes32,bytes,string,uint256)");
    const signatureContractCall = ethers_1.ethers.utils.id("ContractCall(address,string,string,bytes32,bytes)");
    const event = findContractEvent(receipt, [signatureContractCall, signatureContractCallWithToken], new abi_1.Interface(axelarGatewayAbi_json_1.default));
    return event === null || event === void 0 ? void 0 : event.eventLog.args[1].toLowerCase();
}
exports.getDestinationChainFromTxReceipt = getDestinationChainFromTxReceipt;
function getLogIndexFromTxReceipt(receipt) {
    const signatureContractCallWithToken = ethers_1.ethers.utils.id("ContractCallWithToken(address,string,string,bytes32,bytes,string,uint256)");
    const signatureContractCall = ethers_1.ethers.utils.id("ContractCall(address,string,string,bytes32,bytes)");
    const event = findContractEvent(receipt, [signatureContractCall, signatureContractCallWithToken], new abi_1.Interface(axelarGatewayAbi_json_1.default));
    return event === null || event === void 0 ? void 0 : event.logIndex;
}
exports.getLogIndexFromTxReceipt = getLogIndexFromTxReceipt;
function getNativeGasAmountFromTxReceipt(receipt) {
    const signatureGasPaidContractCallWithToken = ethers_1.ethers.utils.id("NativeGasPaidForContractCallWithToken(address,string,string,bytes32,string,uint256,uint256,address)");
    const signatureGasPaidContractCall = ethers_1.ethers.utils.id("NativeGasPaidForContractCall(address,string,string,bytes32,uint256,address)");
    const event = findContractEvent(receipt, [signatureGasPaidContractCall, signatureGasPaidContractCallWithToken], new abi_1.Interface(IAxelarGasService_json_1.default));
    return event === null || event === void 0 ? void 0 : event.eventLog.args.slice(-2)[0].toString();
}
exports.getNativeGasAmountFromTxReceipt = getNativeGasAmountFromTxReceipt;
function getGasAmountFromTxReceipt(receipt) {
    const signatureGasPaidContractCallWithToken = ethers_1.ethers.utils.id("GasPaidForContractCallWithToken(address,string,string,bytes32,string,uint256,address,uint256,address)");
    const signatureGasPaidContractCall = ethers_1.ethers.utils.id("GasPaidForContractCall(address,string,string,bytes32,uint256,uint256,address)");
    const event = findContractEvent(receipt, [signatureGasPaidContractCall, signatureGasPaidContractCallWithToken], new abi_1.Interface(IAxelarGasService_json_1.default));
    return event === null || event === void 0 ? void 0 : event.eventLog.args.slice(-2)[0].toString();
}
exports.getGasAmountFromTxReceipt = getGasAmountFromTxReceipt;
function findContractEvent(receipt, eventSignatures, abiInterface) {
    for (const log of receipt.logs) {
        const eventIndex = eventSignatures.indexOf(log.topics[0]);
        if (eventIndex > -1) {
            const eventLog = abiInterface.parseLog(log);
            return {
                signature: eventSignatures[eventIndex],
                eventLog,
                logIndex: log.logIndex,
            };
        }
    }
}
exports.findContractEvent = findContractEvent;
//# sourceMappingURL=contractEventHelper.js.map