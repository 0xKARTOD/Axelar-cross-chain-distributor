import { OTC } from "../services/types";
import { RestService, SocketService } from "../services";
import { AxelarAssetTransferConfig, Environment } from "./types";
export declare class AxelarAssetTransfer {
    readonly environment: Environment;
    readonly resourceUrl: string;
    readonly api: RestService;
    readonly depositServiceApi: RestService;
    private gasReceiverContract;
    private depositServiceContract;
    private evmDenomMap;
    private staticInfo;
    constructor(config: AxelarAssetTransferConfig);
    getDepositAddressForNativeWrap(fromChain: string, toChain: string, destinationAddress: string, refundAddress: string, salt?: number): Promise<string>;
    getDepositAddressForNativeUnwrap(fromChain: string, toChain: string, destinationAddress: string, refundAddress: string, salt?: number): Promise<string>;
    getDepositAddressFromRemote(wrapOrUnWrap: "wrap" | "unwrap", fromChain: string | undefined, toChain: string | undefined, destinationAddress: string, refundAddress: string, hexSalt: string): Promise<{
        address: string;
    }>;
    validateOfflineDepositAddress(wrapOrUnWrap: "wrap" | "unwrap", fromChain: string, toChain: string, destinationAddress: string, refundAddress: string, hexSalt: string): Promise<string>;
    getDepositAddress(fromChain: string, toChain: string, destinationAddress: string, asset: string, options?: {
        _traceId: string;
    }): Promise<string>;
    getOneTimeCode(signerAddress: string, traceId: string): Promise<OTC>;
    getInitRoomId(fromChain: string, toChain: string, destinationAddress: string, asset: string, publicAddress: string, signature: string, traceId: string): Promise<string>;
    getLinkEvent(roomId: string, sourceChain: string, destinationChain: string, destinationAddress: string): Promise<string>;
    getSocketService(): SocketService;
    extractDepositAddress(roomId: string): any;
    getGasReceiverContractAddress(chainName: string): Promise<string>;
    getERC20Denom(chainName: string): Promise<string>;
    getDepositServiceContractAddress(chainName: string): Promise<string>;
    getStaticInfo(): Promise<Record<string, any>>;
}
//# sourceMappingURL=AxelarAssetTransfer.d.ts.map